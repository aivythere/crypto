# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\vtg edison cryptosoft\fuckhardtimes.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import random
import time

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QMessageBox

import tech

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(390, 797)
        font = QtGui.QFont()
        font.setFamily("Montserrat Medium")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(7)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("font: 57 10pt \"Montserrat Medium\";\n"
"background-color: rgb(70, 70, 70);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(30, 620, 70, 17))
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_2.setGeometry(QtCore.QRect(160, 620, 70, 17))
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_3.setGeometry(QtCore.QRect(290, 620, 70, 17))
        self.checkBox_3.setObjectName("checkBox_3")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(290, 540, 61, 81))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(160, 540, 61, 81))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(30, 540, 61, 81))
        self.label_3.setScaledContents(True)
        self.label_3.setObjectName("label_3")
        self.startBtn = QtWidgets.QPushButton(self.centralwidget)
        self.startBtn.setGeometry(QtCore.QRect(100, 670, 181, 41))
        self.startBtn.setStyleSheet("color: rgb(192, 255, 198);\n"
"background-color: rgb(0, 65, 9);\n"
"border-color: rgb(255, 255, 255);")
        self.startBtn.setObjectName("startBtn")
        self.stopBtn = QtWidgets.QPushButton(self.centralwidget)
        self.stopBtn.setGeometry(QtCore.QRect(100, 720, 181, 41))
        self.stopBtn.setStyleSheet("color: rgb(255, 192, 193);\n"
"background-color: rgb(89, 0, 1);\n"
"border-color: rgb(255, 255, 255);")
        self.stopBtn.setObjectName("stopBtn")
        self.checked = QtWidgets.QListWidget(self.centralwidget)
        self.checked.setGeometry(QtCore.QRect(30, 300, 321, 141))
        self.checked.setStyleSheet("background-color: rgb(202, 202, 202);\n"
"color: rgb(0, 171, 48);")
        self.checked.setObjectName("checked")
        item = QtWidgets.QListWidgetItem()
        self.checked.addItem(item)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(30, 240, 321, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(30, 260, 71, 31))
        self.label_4.setStyleSheet("color: rgb(79, 201, 62);")
        self.label_4.setObjectName("label_4")
        self.operational = QtWidgets.QListWidget(self.centralwidget)
        self.operational.setGeometry(QtCore.QRect(30, 90, 321, 141))
        self.operational.setStyleSheet("background-color: rgb(202, 202, 202);")
        self.operational.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.operational.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.operational.setObjectName("operational")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(30, 50, 91, 31))
        self.label_5.setObjectName("label_5")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(30, 450, 321, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.foundText = QtWidgets.QLabel(self.centralwidget)
        self.foundText.setGeometry(QtCore.QRect(100, 260, 101, 31))
        self.foundText.setStyleSheet("color: rgb(11, 171, 0)")
        self.foundText.setObjectName("foundText")
        self.cgcheckedText = QtWidgets.QLabel(self.centralwidget)
        self.cgcheckedText.setGeometry(QtCore.QRect(130, 50, 221, 31))
        self.cgcheckedText.setObjectName("cgcheckedText")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(30, 530, 321, 20))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.autoWithdrawCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.autoWithdrawCheckBox.setGeometry(QtCore.QRect(30, 470, 121, 17))
        self.autoWithdrawCheckBox.setStyleSheet("color: rgb(255, 255, 255);")
        self.autoWithdrawCheckBox.setObjectName("autoWithdrawCheckBox")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(30, 500, 161, 21))
        self.lineEdit.setStyleSheet("background-color: rgb(131, 131, 131);")
        self.lineEdit.setObjectName("lineEdit")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(155, 471, 21, 21))
        self.label_6.setScaledContents(True)
        self.label_6.setObjectName("label_6")
        self.totalWithdrawed = QtWidgets.QLabel(self.centralwidget)
        self.totalWithdrawed.setGeometry(QtCore.QRect(260, 470, 71, 31))
        self.totalWithdrawed.setStyleSheet("color: rgb(79, 201, 62);")
        self.totalWithdrawed.setObjectName("totalWithdrawed")
        self.totalWithdrawedSum = QtWidgets.QLabel(self.centralwidget)
        self.totalWithdrawedSum.setGeometry(QtCore.QRect(260, 500, 121, 31))
        self.totalWithdrawedSum.setStyleSheet("color: rgb(79, 201, 62);")
        self.totalWithdrawedSum.setObjectName("totalWithdrawedSum")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.start_brute()
        self.print_checkers()
        self.stop_brute()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SGLS CryptoBrute v2.8"))
        self.checkBox.setText(_translate("MainWindow", " BTC"))
        self.checkBox_2.setText(_translate("MainWindow", "LTC"))
        self.checkBox_3.setText(_translate("MainWindow", "USDT "))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"usdt.png\"/></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"ltc.png\"/></p></body></html>"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"btc.png\"/></p></body></html>"))
        self.startBtn.setText(_translate("MainWindow", "START"))
        self.stopBtn.setText(_translate("MainWindow", "STOP"))
        __sortingEnabled = self.checked.isSortingEnabled()
        self.checked.setSortingEnabled(False)
        self.checked.setSortingEnabled(__sortingEnabled)
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt;\">Found: </span>"))
        self.label_5.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt;\">Checked: </span>"))
        self.foundText.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:600; color:#4fc93e;\">0</span></p></body></html>"))
        self.cgcheckedText.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:600; color:#000000;\">0</span></p></body></html>"))
        self.autoWithdrawCheckBox.setText(_translate("MainWindow", "Auto-withdraw"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "Input your wallet..."))
        self.label_6.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"savelittle.png\"/><br/></p></body></html>"))
        self.totalWithdrawed.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:600;\">Total:</span></p></body></html>"))
        self.totalWithdrawedSum.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:600;\">0.00$</span></p></body></html>"))

    def error_msg(self, text, inftext, title):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText(text)
        msg.setInformativeText(inftext)
        msg.setWindowTitle(title)
        msg.exec_()

    stopped = 0

    def print_checkers(self):
        btc = self.checkBox.checkState()
        ltc = self.checkBox_2.checkState()
        usdt = self.checkBox_3.checkState()
        return [btc, ltc, usdt]

    def start_brute(self):
        self.startBtn.clicked.connect(lambda: self.startBruting())

    def stop_bruting(self):
        self.stopped = 1
        self.stopBtn.setStyleSheet("color: rgb(169, 169, 169);\n"
                                    "background-color: rgb(105, 105, 105);\n"
                                    "border-color: rgb(255, 255, 255);")
        self.stopBtn.setEnabled(False)
        self.startBtn.setEnabled(True)
        # self.startBtn.setStyleSheet
        self.startBtn.setStyleSheet("color: rgb(192, 255, 198);\n"
                                    "background-color: rgb(0, 65, 9);\n"
                                    "border-color: rgb(255, 255, 255);")

    def stop_brute(self):
        self.stopBtn.clicked.connect(lambda: self.stop_bruting())

    def addChecked(self, wallet):
        dice = random.randint(1, 3)
        self.operational.addItem(f"Wallet check: {wallet}")
        self.operational.scrollToBottom()
        if self.operational.count() > 8:
            self.operational.takeItem(self.operational.count()-7)

    def chanceCalc(self, percent):
        perc = float(percent)
        num = float(random.randint(0, 100))
        if num <= perc:
            return True
        return False


    def startBruting(self):
        guessed = []
        currentchance = 50
        everyXareSuccess = 1200
        self.stopped = 0
        if 2 in self.print_checkers():
            self.stopBtn.setStyleSheet("color: rgb(255, 192, 193);\n"
                            "background-color: rgb(89, 0, 1);\n"
                            "border-color: rgb(255, 255, 255);")
            self.startBtn.setStyleSheet("color: rgb(169, 169, 169);\n"
                                        "background-color: rgb(105, 105, 105);\n"
                                        "border-color: rgb(255, 255, 255);")
            self.startBtn.setEnabled(False)
            self.stopBtn.setEnabled(True)
            response = self.print_checkers()
            for i, smth in enumerate(range(2, 19928391)):
                if self.stopped == 0:

                    QApplication.processEvents()
                    checked = int(tech.unhtml(self.cgcheckedText.text()))
                    checked = checked+1
                    self.cgcheckedText.setText(f"<html><head/><body><p><span style=\" font-size:16pt; font-weight:600; color:#000000;\">{checked}</span></p></body></html>")

                    if not i == 0:
                        if not i % (everyXareSuccess * 29) == 0: # * 3 - минуты
                            self.addChecked(tech.generateSeedAlikeStr(found=False))
                            time.sleep(0.051)

                        else:
                            # print(f'succes {i} {smth} | {i % everyXareSuccess}')
                            checkedCount = int(tech.unhtml(self.foundText.text()))
                            checkedCount = str(checkedCount+1)
                            foundsum = float(random.randint(19, 109))
                            self.foundText.setText(f"<html><head/><body><p><span style=\" font-size:16pt; font-weight:600; color:#4fc93e;\">{checkedCount}</span></p></body></html>")
                            self.checked.addItem(f"{tech.generateSeedAlikeStr(found=True)} | {'USDT' if response[2] == 2 else 'LTC' if response[1] == 2 else 'BTC' if response[0] == 2 else 'poshelnahuy'} | {foundsum} USD found!")
                            self.checked.scrollToBottom()
                            totalFound = float(tech.unhtml(self.totalWithdrawedSum.text()))
                            totalFound = str(totalFound + foundsum)
                            self.totalWithdrawedSum.setText(
                                f"<html><head/><body><p><span style=\" font-size:16pt; font-weight:600; color:#4fc93e;\">{totalFound}$</span></p></body></html>")
                            time.sleep(0.051)
                else: break
                QApplication.processEvents()
            QApplication.processEvents()
        else:
            self.error_msg('Error', 'Choose atleast 1 currency', '0x012838BBD')
            QApplication.processEvents()
            time.sleep(0.051)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
